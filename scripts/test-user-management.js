#!/usr/bin/env node

/**
 * Script de prueba para las funciones de gesti√≥n de usuarios
 * 
 * Este script ayuda a probar las Cloud Functions de updateUserRole y deleteUser
 * antes de usarlas en producci√≥n desde la interfaz de usuario.
 * 
 * Uso:
 *   node scripts/test-user-management.js
 */

const admin = require('firebase-admin');

// Inicializar Firebase Admin
const serviceAccount = require('../functions/serviceAccountKey.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: serviceAccount.project_id
});

const db = admin.firestore();
const auth = admin.auth();

async function listUsers() {
  console.log('\nüìã Listando usuarios del sistema:\n');
  
  const usersSnapshot = await db.collection('users').get();
  
  if (usersSnapshot.empty) {
    console.log('‚ùå No hay usuarios en la base de datos.');
    return [];
  }
  
  const users = [];
  usersSnapshot.forEach((doc) => {
    const userData = doc.data();
    users.push({
      uid: doc.id,
      email: userData.email,
      role: userData.role || 'sin rol'
    });
    
    console.log(`  ‚Ä¢ ${userData.email || 'sin email'}`);
    console.log(`    UID: ${doc.id}`);
    console.log(`    Rol: ${userData.role || 'sin rol'}`);
    console.log('');
  });
  
  return users;
}

async function testUpdateRole(userId, newRole) {
  console.log(`\nüîÑ Probando actualizaci√≥n de rol...`);
  console.log(`   Usuario: ${userId}`);
  console.log(`   Nuevo rol: ${newRole}\n`);
  
  try {
    // Actualizar custom claims
    await auth.setCustomUserClaims(userId, { role: newRole });
    console.log('‚úÖ Custom claims actualizados');
    
    // Actualizar Firestore
    await db.collection('users').doc(userId).update({
      role: newRole,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    console.log('‚úÖ Documento de Firestore actualizado');
    
    // Verificar cambios
    const userDoc = await db.collection('users').doc(userId).get();
    const userData = userDoc.data();
    console.log(`‚úÖ Rol verificado en Firestore: ${userData.role}`);
    
    const userRecord = await auth.getUser(userId);
    console.log(`‚úÖ Rol verificado en Auth: ${userRecord.customClaims?.role}`);
    
    console.log('\n‚úÖ Actualizaci√≥n de rol completada exitosamente\n');
    return true;
  } catch (error) {
    console.error('‚ùå Error al actualizar rol:', error.message);
    return false;
  }
}

async function testDeleteUser(userId) {
  console.log(`\nüóëÔ∏è  Probando eliminaci√≥n de usuario...`);
  console.log(`   Usuario: ${userId}\n`);
  
  try {
    // Obtener info antes de eliminar
    const userDoc = await db.collection('users').doc(userId).get();
    if (!userDoc.exists) {
      console.log('‚ùå Usuario no encontrado en Firestore');
      return false;
    }
    
    const userData = userDoc.data();
    console.log(`   Email: ${userData.email}`);
    console.log(`   Rol: ${userData.role}`);
    
    // Eliminar de Firestore
    await db.collection('users').doc(userId).delete();
    console.log('‚úÖ Usuario eliminado de Firestore');
    
    // Eliminar de Authentication
    await auth.deleteUser(userId);
    console.log('‚úÖ Usuario eliminado de Authentication');
    
    console.log('\n‚úÖ Usuario eliminado completamente del sistema\n');
    return true;
  } catch (error) {
    console.error('‚ùå Error al eliminar usuario:', error.message);
    return false;
  }
}

async function main() {
  console.log('\nüîß Sistema de Prueba de Gesti√≥n de Usuarios\n');
  console.log('‚ïê'.repeat(50));
  
  try {
    // Listar usuarios
    const users = await listUsers();
    
    if (users.length === 0) {
      console.log('\nüí° Primero crea algunos usuarios de prueba.');
      process.exit(0);
    }
    
    console.log('\nüìù Instrucciones:');
    console.log('   1. Este script es solo para pruebas en desarrollo');
    console.log('   2. NO uses este script en producci√≥n');
    console.log('   3. Las funciones en producci√≥n deben llamarse desde la app\n');
    
    // Ejemplo comentado para evitar ejecuciones accidentales
    console.log('üí° Para probar, descomenta las l√≠neas de prueba en el c√≥digo:\n');
    console.log('   // Ejemplo de actualizaci√≥n de rol:');
    console.log('   // await testUpdateRole("USER_ID", "admin");\n');
    console.log('   // Ejemplo de eliminaci√≥n:');
    console.log('   // await testDeleteUser("USER_ID");\n');
    
    // DESCOMENTA ESTAS L√çNEAS PARA PROBAR (con cuidado):
    // ‚ö†Ô∏è ADVERTENCIA: Estas operaciones afectan datos reales
    
    // await testUpdateRole('REEMPLAZAR_CON_UID_REAL', 'supervisor');
    // await testDeleteUser('REEMPLAZAR_CON_UID_REAL');
    
  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    process.exit(1);
  } finally {
    console.log('‚ïê'.repeat(50));
    console.log('‚úÖ Script completado\n');
    process.exit(0);
  }
}

// Ejecutar
main();
